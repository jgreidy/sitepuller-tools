<?php
/**
 * @file
 * Code for the Sitepuller-Tools module.
 */

/**
 * Implements hook_permission
 * @return array permission info
 */
function sitepuller_tools_permission() {
   return array(
    'administer sitepuller_tools settings' => array(
      'title' => t('Configure Sitepuller user'),
      'description' => t('Describe the your user account on the local machine for Sitepuller.'),
    ),
    'execute sitepuller_tools tasks' => array(
      'title' => t('Execute Sitepuller tasks'),
      'description' => t('Move sites to the local machine with Sitepuller.'),
    ),
  );
}

/**
 * Implements hook_menu
 */
function sitepuller_tools_menu() {

  $items = array();

  $items['admin/settings/sitepuller_tools'] = array(
    'title' => 'Sitepuller module settings',
    'description' => 'Enter information about your user on this machine.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sitepuller_tools_admin'),
    'access arguments' => array('administer sitepuller_tools settings'),
    'type' => MENU_CALLBACK,
   );

  $items['sitepuller_tools/%/run'] = array(
    'title' => 'Sitepuller Task Runner',
    'description' => 'Execute a Sitepuller task.',
    'access arguments' => array('execute sitepuller_tools tasks'),
    'type' => MENU_CALLBACK,
    'page callback' => 'sitepuller_tools_run_task',
    'page arguments' => array(1),
  );

  return $items;

}

/**
 * form for configuring sitepuller_tools
 * @return array form
 */
function sitepuller_tools_admin() {
  $form = array();

  $form['sitepuller_tools_user'] = array(
    '#type' => 'textfield',
    '#title' => t('User Name'),
    '#default_value' => variable_get('sitepuller_tools_user', ''),
    '#size' => 60,
    '#maxlength' => 60,
    '#description' => t("The name of your user account on this machine."),
    '#required' => TRUE,
  );

  $form['sitepuller_tools_private_key_file'] = array(
    '#type' => 'textfield',
    '#title' => t('RSA Private Key File'),
    '#default_value' => variable_get('sitepuller_tools_private_key_file', ''),
    '#size' => 60,
    '#maxlength' => 255,
    '#description' => t("Absolute path to your ssh key file for RSA. eg. /Users/myuser/.ssh/id_rsa"),
    '#required' => TRUE,
  );

  $form['sitepuller_tools_passphrase'] = array(
    '#type' => 'password',
    '#title' => t('RSA passphrase'),
    '#default_value' => variable_get('sitepuller_tools_passphrase', 'the old one'),
    '#size' => 60,
    '#maxlength' => 128,
    '#description' => t("Enter the passphrase you used to create your RSA public/private key pair."),
    '#required' => TRUE,
  );

  $form['sitepuller_tools_entropy_file'] = array(
    '#type' => 'textfield',
    '#title' => t('Encryption Entropy File'),
    '#default_value' => variable_get('sitepuller_tools_entropy_file', ''),
    '#size' => 60,
    '#maxlength' => 255,
    '#description' => t("A file that can be reliably be found on your disk somewhere (not available over the network or web accessible). The contents of this file will be used to encrypt and decrypt the RSA passphrase above. If the file gets deleted just make a different one, come back here and enter the passphrase again."),
    '#required' => TRUE,
  );

  $form['sitepuller_tools_preamble'] = array(
    '#type' => 'textarea',
    '#title' => t('Preamble to drush sessions.'),
    '#default_value' => variable_get('sitepuller_tools_preamble', ''),
    '#cols' => 120,
    '#rows' => 3,
    '#description' => t("DevDesktop at least puts a prefix on each command line session that allows drush commands to work. Paste that preamble in here, eg. export PHP_ID=php5_5; export PATH=\"/Applications/DevDesktop/\$PHP_ID/bin:/Applications/DevDesktop/mysql/bin:/Applications/DevDesktop/drush:\$PATH\""),
    '#wysiwyg' => false,
  );

  return system_settings_form($form);
}

/**
 * implements hook_admin_validate
 * @param  array $form        form
 * @param  array &$form_state form state
 * @return nothing              form set error or encrypt the passphrase
 */
function sitepuller_tools_admin_validate($form, &$form_state) {
  $user = $form_state['values']['sitepuller_tools_user'];
  $private = $form_state['values']['sitepuller_tools_private_key_file'];
  if (!(file_exists($private) && ($private_rsa = file_get_contents($private)) !== FALSE)) {
    form_set_error('sitepuller_tools_private_key_file', t('Can not open @file', array('@file' => $private)));
  }
  $entropy_file = $form_state['values']['sitepuller_tools_entropy_file'];
  if (!(file_exists($entropy_file) && ($entropy = file_get_contents($entropy_file)) !== FALSE)) {
    form_set_error('sitepuller_tools_entropy_file', t('Can not open @file', array('@file' => $entropy)));
  }

  // encrypt the passphrase using the digested entropy file as a key
  $passphrase = $form_state['values']['sitepuller_tools_passphrase'];
  if(!function_exists('_sitepuller_tools_encrypt')) {
    module_load_include('rules.inc', 'sitepuller_tools', $name = NULL);
    }
  $unpacked = _sitepuller_tools_encrypt($entropy, $passphrase);

  $form_state['values']['sitepuller_tools_passphrase'] = $unpacked;
  // sm(array('before' => $passphrase, 'after' => $encrypted, 'unpacked' => $unpacked, 'hash' => $hash));
}

function sitepuller_tools_run_task($task_nid) {
  try {
    $node = node_load($task_nid);
    if (empty($node) || $node->type != 'sitepuller_task') {
      throw new Exception(t("sitepuller_tools expects sitepuller tasks"));
      }

    // cache the current task nid, and local & remote nids for building the form
    if(!function_exists('_sitepuller_tools_get_cached_data')) {
      module_load_include('rules.inc', 'sitepuller_tools', $name = NULL);
    }
    $info = _sitepuller_tools_get_cached_data();
    $task = node_load($task_nid);
    $task_wrapper = entity_metadata_wrapper('node', $task);
    $remote_site_nid = $task_wrapper->field_sitepuller_task_remo_site->getIdentifier();
    if (empty($info['remote']["$remote_site_nid"])) {
      throw new Exception(
        t('Missing cached information for remote site. Please <a href="/node/@nid/edit">resave the Sitepuller Remote</a>.', array('@nid' => $remote_site_nid)));
    }
    $local_site_nid = $task_wrapper->field_sitepuller_task_local_site->getIdentifier();
    if (empty($info['local']["$local_site_nid"])) {
      throw new Exception(t('Missing cached information for local site. Please <a href="/node/@nid/edit">resave the Sitepuller Local</a>.', array('@nid' => $local_site_nid)));
    }
    $info['current-task'] = array('task' => $task_nid, 'local' => $local_site_nid, 'remote' => $remote_site_nid);

    _sitepuller_tools_set_cached_data($info);

    return drupal_get_form('sitepuller_tools_task_form');
    }
  catch (Exception $e) {
    $sitepuller_tools_message[] = $e->getMessage();
    drupal_set_message(implode("\r ",$sitepuller_tools_message));
    return array();
  }
}

function sitepuller_tools_task_form($form_state) {
  if(!function_exists('_sitepuller_tools_get_cached_data')) {
    module_load_include('rules.inc', 'sitepuller_tools', $name = NULL);
  }
  $info = _sitepuller_tools_get_cached_data();
  $task_nid = $info['current-task']['task'];
  $local_site_nid = $info['current-task']['local'];
  $remote_site_nid = $info['current-task']['remote'];
  $remote = $info['remote']["$remote_site_nid"];
  $local = $info['local']["$local_site_nid"];

  $form['remote'] = array(
    '#type' => 'fieldset',
    '#title' => t('Remote Site'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['remote']['info'] = array(
    '#markup' => t("Site '@site' on @machine.", array('@site' => $remote['name'], '@machine' => $remote['machine'])),
   );
  $form['remote']['remote_subsites'] = array(
    '#type' => 'radios',
    '#title' => t('Remote subsite to pull:'),
    '#default_value' => 'default',
    '#options' => $remote['subsites'],
    );
  $form['remote']['fresh_copy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete any previous archive before starting'),
    '#default_value' => FALSE,
    );

  $form['local'] = array(
    '#type' => 'fieldset',
    '#title' => t('Local Site'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['local']['info'] = array(
    '#markup' => t("Site '@site' on this machine.", array('@site' => $local['name'])),
   );
  $form['local']['local_subsites'] = array(
    '#type' => 'radios',
    '#title' => t('Local subsite to replace:'),
    '#default_value' => 'default',
    '#options' => $local['subsites'],
    );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Pull',
  );
  $form['cancel'] = array(
    '#type' => 'button',
    '#value' => t('Cancel')
  );

  return $form;
}

function sitepuller_tools_task_form_validate($form, &$form_state) {
  if ($form_state['values']['op'] == 'Cancel') {
    drupal_goto('sitepuller-tasks');
  }
}

function sitepuller_tools_task_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == 'Pull') {
    $info = _sitepuller_tools_get_cached_data();
    $task_nid = $info['current-task']['task'];
    $local_site_nid = $info['current-task']['local'];
    $remote_site_nid = $info['current-task']['remote'];
    $remote = $info['remote']["$remote_site_nid"];
    $local = $info['local']["$local_site_nid"];
    $index = $form_state['values']['remote_subsites'];
    $remote_subsite = $remote['subsites']["$index"];
    $index = $form_state['values']['local_subsites'];
    $local_subsite = $local['subsites']["$index"];

    $inc_path = drupal_get_path('module', 'sitepuller_tools') . '/sitepuller_tools.task.inc' ;
    $remote_archive = '/tmp/sitepuller/music.test2.library.cornell.edu/jgr25/archive/music.test2.library.cornell.edu.tar.gz';

    $batch = array(
      'operations' => array(
        array('sitepuller_tools_perform_task', array($task_nid, $remote_subsite, $local_subsite, $form_state)),
        ),
      'title' => t('Processing Sitepuller Task'),
      'init_message' => t('Task is starting.'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('Sitepuller Task has encountered an error.'),
      'file' => $inc_path,
      'finished' =>  'sitepuller_tools_perform_task_final',
       );
    batch_set($batch);

    // if(!function_exists('_sitepuller_tools_run_task')) {
    //   module_load_include('rules.inc', 'sitepuller_tools', $name = NULL);
    // }
    // _sitepuller_tools_run_task($task_nid, $remote_subsite, $local_subsite);

    drupal_set_message(t('The Sitepuller Task has been run.'));
  }
  else {
  }
  $form_state['redirect'] = 'sitepuller-tasks';
}

function _sitepuller_tools_x_finish_batch($success, $results, $operations) {
  if(!function_exists('_sitepuller_tools_finish_batch')) {
    module_load_include('rules.inc', 'sitepuller_tools', $name = NULL);
  }
  _sitepuller_tools_finish_batch($success, $results, $operations);
}

