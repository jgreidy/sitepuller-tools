<?php
/**
 * @file
 * Code for the Sitepuller-Tools module.
 */

/**
 * Implements hook_permission
 * @return array permission info
 */
function sitepuller_tools_permission() {
   return array(
    'administer sitepuller_tools settings' => array(
      'title' => t('Configure Sitepuller user'),
      'description' => t('Describe the your user account on the local machine for Sitepuller.'),
    ),
  );
}

/**
 * Implements hook_menu
 */
function sitepuller_tools_menu() {

  $items = array();

  $items['admin/settings/sitepuller_tools'] = array(
    'title' => 'Sitepuller module settings',
    'description' => 'Enter information about your user on this machine.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sitepuller_tools_admin'),
    'access arguments' => array('administer sitepuller_tools settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;

}

/**
 * form for configuring sitepuller_tools
 * @return array form
 */
function sitepuller_tools_admin() {
  $form = array();

  $form['sitepuller_tools_user'] = array(
    '#type' => 'textfield',
    '#title' => t('User Name'),
    '#default_value' => variable_get('sitepuller_tools_user', ''),
    '#size' => 60,
    '#maxlength' => 60,
    '#description' => t("The name of your user account on this machine."),
    '#required' => TRUE,
  );

  $form['sitepuller_tools_private_key_file'] = array(
    '#type' => 'textfield',
    '#title' => t('RSA Private Key File'),
    '#default_value' => variable_get('sitepuller_tools_private_key_file', ''),
    '#size' => 60,
    '#maxlength' => 255,
    '#description' => t("Absolute path to your ssh key file for RSA. eg. /Users/myuser/.ssh/id_rsa"),
    '#required' => TRUE,
  );

  $form['sitepuller_tools_passphrase'] = array(
    '#type' => 'password',
    '#title' => t('RSA passphrase'),
    '#default_value' => variable_get('sitepuller_tools_passphrase', 'the old one'),
    '#size' => 60,
    '#maxlength' => 128,
    '#description' => t("Enter the passphrase you used to create your RSA public/private key pair."),
    '#required' => TRUE,
  );

  $form['sitepuller_tools_entropy_file'] = array(
    '#type' => 'textfield',
    '#title' => t('Encryption Entropy File'),
    '#default_value' => variable_get('sitepuller_tools_entropy_file', ''),
    '#size' => 60,
    '#maxlength' => 255,
    '#description' => t("A file that can be reliably be found on your disk somewhere (not available over the network or web accessible). The contents of this file will be used to encrypt and decrypt the RSA passphrase above. If the file gets deleted just make a different one, come back here and enter the passphrase again."),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * implements hook_admin_validate
 * @param  array $form        form
 * @param  array &$form_state form state
 * @return nothing              form set error or encrypt the passphrase
 */
function sitepuller_tools_admin_validate($form, &$form_state) {
  $user = $form_state['values']['sitepuller_tools_user'];
  $private = $form_state['values']['sitepuller_tools_private_key_file'];
  if (!(file_exists($private) && ($private_rsa = file_get_contents($private)) !== FALSE)) {
    form_set_error('sitepuller_tools_private_key_file', t('Can not open @file', array('@file' => $private)));
  }
  $entropy_file = $form_state['values']['sitepuller_tools_entropy_file'];
  if (!(file_exists($entropy_file) && ($entropy = file_get_contents($entropy_file)) !== FALSE)) {
    form_set_error('sitepuller_tools_entropy_file', t('Can not open @file', array('@file' => $entropy)));
  }

  // encrypt the passphrase using the digested entropy file as a key
  $passphrase = $form_state['values']['sitepuller_tools_passphrase'];
  if(!function_exists('_sitepuller_tools_encrypt')) {
    module_load_include('rules.inc', 'sitepuller_tools', $name = NULL);
    }
  $unpacked = _sitepuller_tools_encrypt($entropy, $passphrase);

  $form_state['values']['sitepuller_tools_passphrase'] = $unpacked;
  // sm(array('before' => $passphrase, 'after' => $encrypted, 'unpacked' => $unpacked, 'hash' => $hash));
}
