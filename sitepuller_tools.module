<?php
/**
 * @file
 * Code for the Sitepuller-Tools module.
 */

/**
 * Implements hook_permission
 * @return array permission info
 */
function sitepuller_tools_permission() {
   return array(
    'administer sitepuller_tools settings' => array(
      'title' => t('Configure Sitepuller user'),
      'description' => t('Describe the your user account on the local machine for Sitepuller.'),
    ),
    'execute sitepuller_tools tasks' => array(
      'title' => t('Execute Sitepuller tasks'),
      'description' => t('Move sites to the local machine with Sitepuller.'),
    ),
  );
}

/**
 * Implements hook_menu
 */
function sitepuller_tools_menu() {

  $items = array();

  $items['admin/settings/sitepuller_tools'] = array(
    'title' => 'Sitepuller module settings',
    'description' => 'Enter information about your user on this machine.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sitepuller_tools_admin'),
    'access arguments' => array('administer sitepuller_tools settings'),
    'type' => MENU_CALLBACK,
   );

  $items['sitepuller_tools/%/run'] = array(
    'title' => 'Sitepuller Task Runner',
    'description' => 'Execute a Sitepuller task.',
    'access arguments' => array('execute sitepuller_tools tasks'),
    'type' => MENU_CALLBACK,
    'page callback' => 'sitepuller_tools_run_task',
    'page arguments' => array(1),
  );

  return $items;

}

/**
 * form for configuring sitepuller_tools
 * @return array form
 */
function sitepuller_tools_admin() {
  $form = array();

  $form['sitepuller_tools_user'] = array(
    '#type' => 'textfield',
    '#title' => t('User Name'),
    '#default_value' => variable_get('sitepuller_tools_user', ''),
    '#size' => 60,
    '#maxlength' => 60,
    '#description' => t("The name of your user account on this machine."),
    '#required' => TRUE,
  );

  $form['sitepuller_tools_entropy_file'] = array(
    '#type' => 'textfield',
    '#title' => t('Encryption Entropy File'),
    '#default_value' => variable_get('sitepuller_tools_entropy_file', ''),
    '#size' => 60,
    '#maxlength' => 255,
    '#description' => t("A file that can be reliably be found on your disk somewhere (not available over the network or web accessible). The contents of this file will be used to encrypt and decrypt the RSA passphrase above. If the file gets deleted just make a different one, come back here and enter the passphrase again."),
    '#required' => TRUE,
  );

  $form['sitepuller_tools_preamble'] = array(
    '#type' => 'textarea',
    '#title' => t('Preamble to drush sessions.'),
    '#default_value' => variable_get('sitepuller_tools_preamble', ''),
    '#cols' => 120,
    '#rows' => 3,
    '#description' => t("DevDesktop at least puts a prefix on each command line session that allows drush commands to work. Paste that preamble in here, eg. export PHP_ID=php5_5; export PATH=\"/Applications/DevDesktop/\$PHP_ID/bin:/Applications/DevDesktop/mysql/bin:/Applications/DevDesktop/drush:\$PATH\""),
    '#wysiwyg' => false,
  );

  return system_settings_form($form);
}

/**
 * implements hook_admin_validate
 * @param  array $form        form
 * @param  array &$form_state form state
 * @return nothing              form set error or encrypt the passphrase
 */
function sitepuller_tools_admin_validate($form, &$form_state) {
  $user = $form_state['values']['sitepuller_tools_user'];
  $entropy_file = $form_state['values']['sitepuller_tools_entropy_file'];
  if (!(file_exists($entropy_file) && ($entropy = file_get_contents($entropy_file)) !== FALSE)) {
    form_set_error('sitepuller_tools_entropy_file', t('Can not open @file', array('@file' => $entropy)));
  }
}

function sitepuller_tools_run_task($task_nid) {
  try {
    $node = node_load($task_nid);
    if (empty($node) || $node->type != 'sitepuller_task') {
      throw new Exception(t("sitepuller_tools expects sitepuller tasks"));
      }

    // cache the current task nid, and local & remote nids for building the form
    $info['current-task'] = array('task' => $task_nid);
    if(!function_exists('_sitepuller_tools_set_cached_data')) {
      module_load_include('rules.inc', 'sitepuller_tools', $name = NULL);
    }
    _sitepuller_tools_set_cached_data($info);

    return drupal_get_form('sitepuller_tools_task_form');
    }
  catch (Exception $e) {
    $sitepuller_tools_message[] = $e->getMessage();
    drupal_set_message(implode("\r ",$sitepuller_tools_message));
    return array();
  }
}

function sitepuller_tools_task_form($form_state) {
  if(!function_exists('_sitepuller_tools_get_cached_data')) {
    module_load_include('rules.inc', 'sitepuller_tools', $name = NULL);
  }
  $info = _sitepuller_tools_get_cached_data();
  $task_nid = $info['current-task']['task'];
  $task = _sitepuller_tools_info_task($task_nid);
  $remote = _sitepuller_tools_info_remote($task['remote_site_nid']);
  $local = _sitepuller_tools_info_local($task['local_site_nid']);

  $form['remote'] = array(
    '#type' => 'fieldset',
    '#title' => t('Remote Site'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['remote']['info'] = array(
    '#markup' => t("Host: @machine<br />Site: @site<br />Subsite: @subsite<br />", array(
      '@site' => $remote['site_name'],
      '@machine' => $remote['host'],
      '@subsite' => $task['remote_subsite'],
      )),
   );
  $form['remote']['fresh_copy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete any previous archive before starting'),
    '#default_value' => FALSE,
    );

  if ($task['pull_drupal'] || $task['pull_code'] || $task['pull_files'] || $task['pull_private']) {
    $form['remote']['copy_files'] = array(
      '#type' => 'checkbox',
      '#title' => t('Make a remote copy'),
      '#description' => t('Copy code and files on the remote machine then transfer the copy to the local machine (requires sudo). Use this if your remote user does not have access to the code or files.'),
      '#default_value' => FALSE,
      '#disabled' => !$remote['user_sudo'],
      );
  }

  $form['local'] = array(
    '#type' => 'fieldset',
    '#title' => t('Local Site'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['local']['info'] = array(
    '#markup' => t("Host: localhost<br />Site: @site<br />Subsite: @subsite<br />", array(
      '@site' => $local['site_name'],
      '@subsite' => $task['local_subsite'],
      )),
   );

  $form['task'] = array(
    '#type' => 'fieldset',
    '#title' => t('Task'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $options = array(
    'pull_database' => t('Subsite database'),
    'pull_drupal' => t('Drupal core code'),
    'pull_code' => t('Theme, module, library code'),
    'pull_files' => t('Public files'),
    'pull_private' => t('Private files'),
    );
  $defaults = array();
  foreach ($options as $key => $value) {
     if ($task["$key"]) $defaults[] = $key;
  }
  $form['task']['pull_options'] = array(
    '#title' => t('Which components to pull'),
    '#type' => 'checkboxes',
    '#description' => t('These selections can be changed by <a href="@link">editing the task</a>.',
      array('@link' => '/node/' . $task_nid . '/edit')),
    '#options' => $options,
    '#default_value' => $defaults,
    '#disabled' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create Sitepuller Script'),
  );
  $form['cancel'] = array(
    '#type' => 'button',
    '#value' => t('Cancel')
  );

  return $form;
}

function sitepuller_tools_task_form_validate($form, &$form_state) {
  if ($form_state['values']['op'] == 'Cancel') {
    drupal_goto('sitepuller-tasks');
  }
}

function sitepuller_tools_task_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == 'Create Sitepuller Script') {
    $info = _sitepuller_tools_get_cached_data();
    $task_nid = $info['current-task']['task'];

    if(!function_exists('sitepuller_tools_script_task')) {
      module_load_include('task.inc', 'sitepuller_tools', $name = NULL);
    }
    sitepuller_tools_script_task($task_nid, $form_state);
  }
  else {
  }
  $form_state['redirect'] = 'sitepuller-tasks';
}
